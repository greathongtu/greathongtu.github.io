<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on greathongtu 的 Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on greathongtu 的 Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Sep 2024 20:47:19 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zed 编辑器中的 SumTree 和 Rope 数据结构</title>
      <link>http://localhost:1313/posts/zed-rope/</link>
      <pubDate>Fri, 06 Sep 2024 20:47:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/zed-rope/</guid>
      <description>代码编辑器最重要的组成部分之一就是如何高效地表示和操作文本。最朴素的想法是直接使用 string 数据结构。但作为使用连续内存的数据结构,string 在面对中间位置的数据插入删除时代价过大。并且更复杂的功能,如跳转到某行,也很难高效实现。&#xA;一个合理的实现应该能将文本分成很多段,且段与段之间互不影响,这样对其中某些部分进行修改也不会有很大的影响。Zed 编辑器选择的是 Rope 这种数据结构。&#xA;Rope 和 SumTree 概述 在 Zed 的具体实现中,Rope 是对底层 SumTree 的一层包装。而 SumTree 可以理解为一种特殊的 B+ 树,其中数据都存储在叶子节点。这种结构使得对某些叶子节点的修改并不会影响其他大多数的节点。通过使用 SumTree,也可以很容易地实现并发访问等功能。&#xA;struct Rope { chunks: SumTree&amp;lt;Chunk&amp;gt;, } struct Chunk(ArrayString&amp;lt;{ 2 * CHUNK_BASE }&amp;gt;); 这里 SumTree 的范型参数为 Chunk，也就是叶子节点存放的数据是 Chunk 类型 (ArrayString 来自 arrayvec 库，是存放在栈里的固定大小的 string)。这里我们首先来看 SumTree 的结构。&#xA;SumTree 的结构 struct SumTree&amp;lt;T: Item&amp;gt;(pub Arc&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;); enum Node&amp;lt;T: Item&amp;gt; { Internal { height: u8, summary: T::Summary, child_summaries: ArrayVec&amp;lt;T::Summary, { 2 * TREE_BASE }&amp;gt;, child_trees: ArrayVec&amp;lt;SumTree&amp;lt;T&amp;gt;, { 2 * TREE_BASE }&amp;gt;, }, Leaf { summary: T::Summary, items: ArrayVec&amp;lt;T, { 2 * TREE_BASE }&amp;gt;, item_summaries: ArrayVec&amp;lt;T::Summary, { 2 * TREE_BASE }&amp;gt;, }, } SumTree 是一棵 B+ 树,其中:</description>
    </item>
    <item>
      <title>Rust Error Handling</title>
      <link>http://localhost:1313/posts/errors_rust/</link>
      <pubDate>Sat, 27 Apr 2024 19:11:57 +0800</pubDate>
      <guid>http://localhost:1313/posts/errors_rust/</guid>
      <description>从第一性原理推导Rust Error:&#xA;One API error, three stakeholders: Users, Programmers, machines.&#xA;model errors first step enum Falliable&amp;lt;T&amp;gt; { Ok(T), Err } second step improve error reporting capabilities&#xA;enum Falliable&amp;lt;T&amp;gt; { Ok(T), Err(String), } third step provide different error messages to users and programmers&#xA;enum Falliable&amp;lt;T&amp;gt; { Ok(T), Err { user_report: String, programmer_report: String, } } forth step provide a stable contract to enable control flow&#xA;增加泛型参数Error&#xA;enum Falliable&amp;lt;T, Error&amp;gt; { Ok(T), Err { user_report: String, programmer_report: String, error: Error, } } for example:</description>
    </item>
    <item>
      <title>Tcp_rust</title>
      <link>http://localhost:1313/posts/tcp_rust/</link>
      <pubDate>Sat, 27 Apr 2024 19:04:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/tcp_rust/</guid>
      <description>TUN/TAP: Linux feature 软件实现的操作系统内核中的虚拟网络设备. TAP等同于一个以太网设备，它操作第二层数据包如以太网数据帧。TUN模拟了网络层设备，操作第三层数据包比如IP数据封包。&#xA;操作系统通过TUN/TAP设备向绑定该设备的用户空间的程序发送数据，反之，用户空间的程序也可以像操作硬件网络设备那样，通过TUN/TAP设备发送数据。在后种情况下，TUN/TAP设备向操作系统的网络栈投递（或“注入”）数据包，从而模拟从外部接受数据的过程。&#xA;正常情况下，Internet 的数据通过 NIC(network interface card)发送到 kernel，user space 程序通过socket 读写 kernel 中的数据。通过 TUN device模拟 NIC, 我们可以直接在user space 和 kernel 之间交流。&#xA;# 查看本机的 NIC ip address # 使用 tun0 发送 ping ping -I tun0 192.168.0.2 # 使用tcp client 从本机向tun0管辖的网段请求建立tcp连接 nc 192.168.0.2 443 # 使用 tshark 查看 tun0 的数据包 tshark -i tun0 tun 设备得到的数据（ip 数据）格式如下：&#xA;Flags [2 bytes] Proto [2 bytes] # ether type. 0x86dd 是 IPv6, 0x0800 是 IPv4 Raw protocol(IP, IPv6, etc) frame.</description>
    </item>
    <item>
      <title>Visitor</title>
      <link>http://localhost:1313/posts/visitor/</link>
      <pubDate>Sat, 27 Apr 2024 19:03:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/visitor/</guid>
      <description>Vistor 模式通过双重分发(double dispatch) 来实现在不更改（不添加新的编译时操作）Element类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作。 Double Dispatch: 第一个为accept方法的多态辨析（哪个element调用的accept）；第二个为visitElementX方法的多态辨析（哪个visitor）。 Vistor 模式的最大缺点在于拓展类层次结构（增加新的Element 子类）会导致 Visitor 类的改变。因此 Visitor 模式适用于“Element 类层次结构稳定，而其中的操作却经常面临频繁改动”。 C++ 代码示例：&#xA;#include &amp;lt;iostream&amp;gt; #include &amp;lt;array&amp;gt; using namespace std; class class_a; class class_b; class Visitor { public: virtual void visit_a(class_a* element_a) = 0; virtual void visit_b(class_b* element_b) = 0; }; class Component { public: virtual void accept(Visitor* visitor) = 0; }; class class_a : public Component { void accept(Visitor* visitor) override { visitor-&amp;gt;visit_a(this); } }; class class_b : public Component { void accept(Visitor* visitor) override { visitor-&amp;gt;visit_b(this); } }; // 在此之上是稳定不变的部分 // ==================================== // 在此之下是变化的部分 class MyVisitor1 : public Visitor { void visit_a(class_a* ea) { cout &amp;lt;&amp;lt; &amp;#34;MyVisitor1 visit_a&amp;#34; &amp;lt;&amp;lt; endl; } void visit_b(class_b* eb) { cout &amp;lt;&amp;lt; &amp;#34;MyVisitor1 visit_b&amp;#34; &amp;lt;&amp;lt; endl; } }; class MyVisitor2 : public Visitor { void visit_a(class_a* ea) { cout &amp;lt;&amp;lt; &amp;#34;MyVisitor2 visit_a&amp;#34; &amp;lt;&amp;lt; endl; } void visit_b(class_b* eb) { cout &amp;lt;&amp;lt; &amp;#34;MyVisitor2 visit_b&amp;#34; &amp;lt;&amp;lt; endl; } }; int main() { std::array&amp;lt;Component *, 2&amp;gt; components = {new class_a, new class_b}; Visitor* v1 = new MyVisitor1; Visitor* v2 = new MyVisitor2; for (auto* pc : components) { pc-&amp;gt;accept(v1); pc-&amp;gt;accept(v2); } } Rust 代码示例：</description>
    </item>
    <item>
      <title>Progit</title>
      <link>http://localhost:1313/posts/progit/</link>
      <pubDate>Sat, 27 Apr 2024 19:01:54 +0800</pubDate>
      <guid>http://localhost:1313/posts/progit/</guid>
      <description>git log: * --grep: 仅显示commit msg中包含指定字符串的提交。 * -S string: 仅显示添加或删除匹配string的提交 * -- some_dir 最后可以加上搜索的目录名，中间用-- 分隔 撤回修改 commit 之后想修改： amend更改刚才的commit message $ git commit -m &amp;#39;initial commit&amp;#39; $ git add forgotten_file $ git commit --amend add之后想撤回： git reset HEAD file_name 删掉修改： git checkout -- file_name fetch 和 merge 的区别： fetch 拉到本地repo但是不merge git log &amp;ndash;oneline &amp;ndash;decorate &amp;ndash;graph &amp;ndash;all 看分支情况 </description>
    </item>
    <item>
      <title>idiomatic rust way</title>
      <link>http://localhost:1313/posts/idiomatic_rust/</link>
      <pubDate>Wed, 03 Apr 2024 15:28:46 +0800</pubDate>
      <guid>http://localhost:1313/posts/idiomatic_rust/</guid>
      <description>遍历可遍历对象(Iterator) The core of Iterator：&#xA;trait Iterator { type Item; fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; } for 循环是迭代器的语法糖&#xA;普通方式： for i in 1..10 { println!(&amp;#34;{}&amp;#34;, i); } 遍历数组： // 数组实现了 IntoIterator trait，隐式调用into_iter() method let arr = [1, 2, 3]; for i in arr { println!(&amp;#34;{i}&amp;#34;); } // enumerate let v = vec![100, 32, 57]; for (i, v) in v.iter().enumerate() { println!(&amp;#34;{} is {}&amp;#34;, i, v); } 链式方法调用 into_iter 会夺走所有权 iter 是借用 iter_mut 是可变借用 let v1: Vec&amp;lt;i32&amp;gt; = vec!</description>
    </item>
    <item>
      <title>Rust Concurrency</title>
      <link>http://localhost:1313/posts/rust-concurrency/</link>
      <pubDate>Sun, 31 Mar 2024 01:39:55 +0800</pubDate>
      <guid>http://localhost:1313/posts/rust-concurrency/</guid>
      <description>use std::thread; fn main() { // pass a closure let numbers = vec![1, 2, 3]; thread::spawn(move || { for n in numbers { println!(&amp;#34;{n}&amp;#34;); } }).join().unwrap(); let t1 = thread::spawn(f); println!(&amp;#34;Hello from the main thread.&amp;#34;); t1.join().unwrap(); } fn f(){ println!(&amp;#34;Hello from another thread!&amp;#34;); let id = thread::current().id(); println!(&amp;#34;This is my thread id: {id:?}&amp;#34;); } // scoped thread // scoped threads can borrow non-static data, // as the scope guarantees all threads will be joined at the end use std::thread; fn main() { let numbers = vec!</description>
    </item>
    <item>
      <title>React</title>
      <link>http://localhost:1313/posts/react/</link>
      <pubDate>Thu, 14 Mar 2024 19:42:12 +0800</pubDate>
      <guid>http://localhost:1313/posts/react/</guid>
      <description> jsx：component返回的jsx，看起来像html，实际是javascript，通过babel将jsx编译成javascript，这些js最后通过dom操作生产html。jsx融合了html，css，js三个。 props：是属性，是上级component向下级component传递的只读的信息 state：使用useState()返回一个初始值v和一个function setV。useState是一个react Hook。根据当前state更新新的state需要用lambda function UI = 很多components = f(state) Npx create-react-app@5 travel-list 运行：npm install; npm start </description>
    </item>
    <item>
      <title>Cpp Concurrency</title>
      <link>http://localhost:1313/posts/cpp-concurrency/</link>
      <pubDate>Fri, 08 Dec 2023 14:52:36 +0800</pubDate>
      <guid>http://localhost:1313/posts/cpp-concurrency/</guid>
      <description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; void hello() { std::cout &amp;lt;&amp;lt; &amp;#34;Hello Concurrent World\n&amp;#34;; } int main() { std::cout &amp;lt;&amp;lt; &amp;#34;first main&amp;#34; &amp;lt;&amp;lt; std::endl; std::thread t(hello); std::cout &amp;lt;&amp;lt; &amp;#34;from main thread!&amp;#34; &amp;lt;&amp;lt; std::endl; // t.join(); t.detach(); } 等待：join&#xA;不等：detach 如后台监控线程&#xA;精细化控制： condition variables and futures&#xA;join之前发生exception怎么办呢：try catch. 更好的方式：RAII&#xA;class thread_guard { std::thread &amp;amp;t; public: explicit thread_guard(std::thread &amp;amp;t_) : t(std::move(t_)) { if (!t.joinable()) { throw std::logic_error(“No thread”); } } ~thread_guard() { t.join(); } thread_guard(thread_guard const &amp;amp;) = delete; thread_guard &amp;amp;operator=(thread_guard const &amp;amp;) = delete; }; // usage std::thread t(my_func); thread_guard g(t); 向thread对象传参的时候要注意隐式类型转换：</description>
    </item>
    <item>
      <title>Map Reduce 的实现</title>
      <link>http://localhost:1313/posts/map-reduce/</link>
      <pubDate>Fri, 01 Dec 2023 20:24:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/map-reduce/</guid>
      <description>数据结构设计 状态都存在 Coordinator 中， Worker 无状态&#xA;Task 结构 每次 Worker 向 Coordinator 请求 Task,&#xA;type Task struct { Input string // Map 阶段的输入文件名 TaskPhase Phase // Worker眼中的阶段： Map/Reduce/Exit/Wait NReduce int // Reduce 的数量 Index int // 该 Task 在 Coordinator中的索引 Intermediates []string // Map生成的中间文件名 Output string // Reduce 生成的最终输出文件名 } Coordinator type Coordinator struct { TaskQueue chan *Task // 待处理的 Task 队列 TaskMetadatas map[int]*TaskMetadata // Coordinator 维护的 Task 元数据 Phase Phase // Coordinator 处于哪个阶段： Map/Reduce/Exit/Wait NReduce int InputFiles []string // Map 阶段的输入文件名 Intermediates [][]string mutex sync.</description>
    </item>
    <item>
      <title>Go 探究</title>
      <link>http://localhost:1313/posts/go-design/</link>
      <pubDate>Sun, 19 Nov 2023 01:29:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/go-design/</guid>
      <description>数组 如果数组中元素的个数小于或者等于 4 个，那么所有的变量会直接在栈上初始化，如果数组元素大于 4 个，变量就会在静态存储区初始化然后拷贝到栈上。 为什么？&#xA;slice []int []interface{} 切片提供了对数组中部分连续片段的引用，而作为数组的引用，我们可以在运行区间可以修改它的长度和范围。当切片底层的数组长度不足时就会触发扩容，切片指向的数组可能会发生变化，不过在上层看来切片是没有变化的，上层只需要与切片打交道不需要关心数组的变化。&#xA;追加和扩容 先确定切片大致容量 如果期望容量大于当前容量的两倍就会使用期望容量； 如果当前切片的长度小于 1024 就会将容量翻倍； 如果当前切片的长度大于 1024 就会每次增加 25% 的容量，直到新容量大于期望容量； 再根据切片中的元素大小对齐内存 切片拷贝 无论是编译期间拷贝还是运行时拷贝，两种拷贝方式都会通过 runtime.memmove 将整块内存的内容拷贝到目标的内存区域中： 大切片扩容或者复制时可能会发生大规模的内存拷贝，要注意。&#xA;map type hmap struct { count int flags uint8 B uint8 noverflow uint16 hash0 uint32 buckets unsafe.Pointer oldbuckets unsafe.Pointer nevacuate uintptr extra *mapextra } type mapextra struct { overflow *[]*bmap oldoverflow *[]*bmap nextOverflow *bmap } count 表示当前哈希表中的元素数量； B 表示当前哈希表持有的 buckets 数量，但是因为哈希表中桶的数量都 2 的倍数，所以该字段会存储对数，也就是 len(buckets) == 2^B； hash0 是哈希的种子，它能为哈希函数的结果引入随机性，这个值在创建哈希表时确定，并在调用哈希函数时作为参数传入； oldbuckets 是哈希在扩容时用于保存之前 buckets 的字段，它的大小是当前 buckets 的一半； 如上图所示哈希表 runtime.</description>
    </item>
    <item>
      <title>sql 总结</title>
      <link>http://localhost:1313/posts/sql-summary/</link>
      <pubDate>Fri, 17 Nov 2023 01:12:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/sql-summary/</guid>
      <description>mysql 执行流程 SQL语句 - 查询缓存 - 解析器（语法分析 语意分析） - 优化器（逻辑优化 物理优化） - 执行器&#xA;为什么说 B+ 树查找行记录，最多只需1~3次磁盘IO InnoDB 中页大小为16KB，一个键值对大概 8B+8B， 也就是一个页可以存1K个 KV pair，1K约等于1000个。 所以深度为3的 b+ 树索引可以维护 10^3 * 10^3 * 10^3 = 10 亿条记录。 正常每个节点不可能都填满了，所以一般 b+ 树高度在2到4 层。根节点在内存内，所以一般查找某一 KV 的行记录时只需1到3次磁盘IO&#xA;InnoDB 关键特性 Insert Buffer 升级为 Change Buffer 对于非聚集索引的插入或更新操作，不是每次直接插入到索引页，而是先判断插入的非聚集索引页是否在缓冲池中，若在则直接插入；若不在，则先放入一个 Insert Buffer 对象中，然后再以一定的频率和情况进行 Insert Buffer 和辅助索引页子节点的 merge 操作。如此一来多个插入合并到一个操作中（因为在一个索引页中）。 条件： 1. 索引是辅助索引； 2. 索引不是唯一的。 Insert Buffer 是一个 B+ 树 Double Write Adaptive Hash Index Async IO Flush Neighbor Page 覆盖索引 覆盖索引（covering index ，或称为索引覆盖）即从非主键索引中就能查到的记录，而不需要查询主键索引中的记录，避免了回表的产生减少了树的搜索次数，显著提升性能</description>
    </item>
    <item>
      <title>Linux 网络I/O复用并发模型</title>
      <link>http://localhost:1313/posts/linux-io/</link>
      <pubDate>Fri, 17 Nov 2023 01:04:58 +0800</pubDate>
      <guid>http://localhost:1313/posts/linux-io/</guid>
      <description>阻塞非阻塞 阻塞占用资源少，但是一个线程通过阻塞IO，只能处理一个请求。 非阻塞需要一直轮询，占用CPU资源大。&#xA;解决方法一：阻塞+多线程/多进程。 浪费资源 解决方法二：非阻塞忙轮询 while(true) { for i in stream[] { if(i has data) { read/ other process } } } 方法三：IO多路复用：既能阻塞等待，不浪费CPU资源，也能同一时刻监听多个IO请求的状态 select: while(true) { select(stream[]); // 阻塞 max 1024个 for i in stream[] { if(i has data) { read/ other process } } } epoll:&#xA;while(true) { 可处理的流 = epoll_wait(epoll_fd);// 阻塞 max `cat /proc/sys/fs/file-max` 个 for i in 可处理的流[] { read/ other process } } select/ poll select 实现多路复用的方式是，将已连接的 Socket 都放到一个文件描述符集合，然后调用 select 函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 Socket，然后再对其处理。</description>
    </item>
    <item>
      <title>wsl 代理问题</title>
      <link>http://localhost:1313/posts/wsl-network/</link>
      <pubDate>Fri, 17 Nov 2023 00:41:53 +0800</pubDate>
      <guid>http://localhost:1313/posts/wsl-network/</guid>
      <description>问题 win11 使用 vs code 连接 wsl 的时候，一些 vs code 的拓展无法连接网络，报错： Failed to establish a socket connection to proxies: [&amp;quot;PROXY 127.0.0.1:7890&amp;quot;]&#xA;或者 go build 因为网络问题无法继续。&#xA;原因 Windows 开启 Clash 之后，Windows 系统代理一般被设置为 127.0.0.1:7890，VS Code 会继承这个代理设置，wsl 中的 vscode-server 也继承了这个代理设置。但是 wsl 在 127.0.0.1:7890 上并没有代理服务，导致 vscode-server 联网失败。所以 wsl 中正确设置 “http_proxy” 和 “https_proxy” 环境变量可以解决问题。&#xA;解决办法 在 wsl 中正确设置 path # ~/.bashrc # 获取 Host IP WINDOWS_IP=$(ip route | grep default | awk &amp;#39;{print $3}&amp;#39;) PROXY_HTTP=&amp;#34;http://${WINDOWS_IP}:7890&amp;#34; # 设置环境变量 export http_proxy=&amp;#34;${PROXY_HTTP}&amp;#34; export https_proxy=&amp;#34;${PROXY_HTTP}&amp;#34; # ~/.</description>
    </item>
    <item>
      <title>Vim 进阶</title>
      <link>http://localhost:1313/posts/vim/</link>
      <pubDate>Thu, 16 Nov 2023 14:39:47 +0800</pubDate>
      <guid>http://localhost:1313/posts/vim/</guid>
      <description>Repeat using . and ; // use &amp;#39; to revert ;, u to revert . var foo = &amp;#34;method(&amp;#34;+argument1+&amp;#34;,&amp;#34;+argument2+&amp;#34;)&amp;#34;; f+ to Move, s&amp;lt;space&amp;gt;+&amp;lt;space&amp;gt;&amp;lt;Esc&amp;gt; to Change. use ; to repeat search and . to repeat change var foo = &amp;#34;method(&amp;#34; + argument1 + &amp;#34;,&amp;#34; + argument2 + &amp;#34;)&amp;#34;; Dot Formula The Ideal:&#xA;one keystroke to Move, one keystroke to Execute. Act, Repeat, Reverse Operator + Motion = Action (dw、guaw、gcap) Misc 如何在每行的最后加上分号？ 先A; 然后就可以重复j.</description>
    </item>
  </channel>
</rss>
