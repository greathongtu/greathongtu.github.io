<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on greathongtu 的 Blog</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>Recent content in Linux on greathongtu 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2023 01:04:58 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 网络I/O复用并发模型</title>
      <link>http://localhost:1313/posts/linux-io/</link>
      <pubDate>Fri, 17 Nov 2023 01:04:58 +0800</pubDate>
      <guid>http://localhost:1313/posts/linux-io/</guid>
      <description>阻塞非阻塞 阻塞占用资源少，但是一个线程通过阻塞IO，只能处理一个请求。 非阻塞需要一直轮询，占用CPU资源大。&#xA;解决方法一：阻塞+多线程/多进程。 浪费资源 解决方法二：非阻塞忙轮询 while(true) { for i in stream[] { if(i has data) { read/ other process } } } 方法三：IO多路复用：既能阻塞等待，不浪费CPU资源，也能同一时刻监听多个IO请求的状态 select: while(true) { select(stream[]); // 阻塞 max 1024个 for i in stream[] { if(i has data) { read/ other process } } } epoll:&#xA;while(true) { 可处理的流 = epoll_wait(epoll_fd);// 阻塞 max `cat /proc/sys/fs/file-max` 个 for i in 可处理的流[] { read/ other process } } select/ poll select 实现多路复用的方式是，将已连接的 Socket 都放到一个文件描述符集合，然后调用 select 函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 Socket，然后再对其处理。</description>
    </item>
  </channel>
</rss>
