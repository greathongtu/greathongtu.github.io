<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on greathongtu 的 Blog</title>
    <link>http://localhost:1313/tags/sql/</link>
    <description>Recent content in Sql on greathongtu 的 Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2023 01:12:44 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sql 总结</title>
      <link>http://localhost:1313/posts/sql-summary/</link>
      <pubDate>Fri, 17 Nov 2023 01:12:44 +0800</pubDate>
      <guid>http://localhost:1313/posts/sql-summary/</guid>
      <description>&lt;h2 id=&#34;mysql-执行流程&#34;&gt;mysql 执行流程&lt;/h2&gt;&#xA;&lt;p&gt;SQL语句 - 查询缓存 - 解析器（语法分析 语意分析） - 优化器（逻辑优化 物理优化） - 执行器&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么说-b-树查找行记录最多只需13次磁盘io&#34;&gt;为什么说 B+ 树查找行记录，最多只需1~3次磁盘IO&lt;/h2&gt;&#xA;&lt;p&gt;InnoDB 中页大小为16KB，一个键值对大概 8B+8B， 也就是一个页可以存1K个 KV pair，1K约等于1000个。 所以深度为3的 b+ 树索引可以维护 10^3 * 10^3 * 10^3 = 10 亿条记录。 正常每个节点不可能都填满了，所以一般 b+ 树高度在2到4 层。根节点在内存内，所以一般查找某一 KV 的行记录时只需1到3次磁盘IO&lt;/p&gt;&#xA;&lt;h2 id=&#34;innodb-关键特性&#34;&gt;InnoDB 关键特性&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Insert Buffer 升级为 Change Buffer&#xA;对于非聚集索引的插入或更新操作，不是每次直接插入到索引页，而是先判断插入的非聚集索引页是否在缓冲池中，若在则直接插入；若不在，则先放入一个 &lt;code&gt;Insert Buffer&lt;/code&gt; 对象中，然后再以一定的频率和情况进行 Insert Buffer 和辅助索引页子节点的 merge 操作。如此一来多个插入合并到一个操作中（因为在一个索引页中）。&#xA;条件： 1. 索引是辅助索引； 2. 索引不是唯一的。&#xA;Insert Buffer 是一个 B+ 树&lt;/li&gt;&#xA;&lt;li&gt;Double Write&lt;/li&gt;&#xA;&lt;li&gt;Adaptive Hash Index&lt;/li&gt;&#xA;&lt;li&gt;Async IO&lt;/li&gt;&#xA;&lt;li&gt;Flush Neighbor Page&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;覆盖索引&#34;&gt;覆盖索引&lt;/h2&gt;&#xA;&lt;p&gt;覆盖索引（covering index ，或称为索引覆盖）即从非主键索引中就能查到的记录，而不需要查询主键索引中的记录，避免了回表的产生减少了树的搜索次数，显著提升性能&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
